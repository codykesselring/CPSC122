Overview and Requirements
For this task, you will convert INFIX expressions to POSTFIX expressions and then evaluate those POSTFIX expressions using stacks. An INFIX expression is the common form of mathematical expressions we are familiar with, such as A+B. Do you see how the operator is “in” between the operands? POSTFIX is another way of writing such an expression where the operator goes after (“post”) the operands, such as AB+. POSTFIX expressions have precedence and associativity builtin so we can process them left to right

You will read a table of symbols (A - Z) and their associated values to be used in evaluating expressions from a file called input.txt. The symbol table in the file will be terminated by a line containing only a #. We will use the long data type (an 8 byte int, used to store really large values) for arithmetic evaluation. Negative values MAY be included. Following this table in the file, there will be a series of strings which will contain INFIX expressions. The INFIX expressions will be given one per line and the series of expressions will be terminated by a line containing only a #.

After printing out the INFIX expression, your program should convert the expression to POSTFIX form. The conversion utilizes an operator stack to ensure operators are properly placed in the POSTFIX expression such that the precedence and associativity of the INFIX expression is properly represented. After the conversion, the POSTFIX form of the expression should be printed out to the monitor.

Finally, the POSTFIX expression should be evaluated (also using a stack inherited from a linked list) and the final value of the expression should be printed out to the console. The evaluation process will require the aforementioned symbol table to lookup the value associated with the expression symbols.
